{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["years","App","useState","programs","setPrograms","query","setQuery","year","setYear","launch","setLaunch","landing","setLanding","useEffect","axios","get","then","response","console","log","data","catch","error","paramString","param","value","filter","parameter","map","a","join","yearListButton","number","Col","md","sm","xs","className","key","Button","variant","onClick","programListTile","program","lg","flight_number","alt","mission_name","src","links","mission_patch_small","mission_id","length","id","launch_year","String","launch_success","land_success","Container","Row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f51fc699.chunk.js","sourcesContent":["import React, { useEffect, useState} from 'react'\nimport axios from 'axios'\nimport { Container, Row, Col, Button } from 'react-bootstrap'\n\nimport './App.css';\n\nconst years = [2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020];\nfunction App() {\n\n  const [programs, setPrograms] = useState([]);\n  const [query, setQuery] = useState('');\n\n  const [year, setYear] = useState(null)\n  const [launch, setLaunch] = useState(false)\n  const [landing, setLanding] = useState(false)\n\n  useEffect(() => {\n    axios.get(`https://api.spacexdata.com/v3/launches?limit=100${query}`)\n    .then(response => {\n        console.log(response.data)\n        setPrograms(response.data)\n    })\n    .catch(error => {\n        console.log('error', error)\n    })\n\n    return () => {}\n  }, [query]);\n\n\n  useEffect(() => {\n    const parameters = [\n      {\n        param: 'launch_year',\n        value: year\n      },{\n        param: 'launch_success',\n        value: launch\n      },{\n        param: 'land_success',\n        value: landing\n      }\n    ]\n \n\n    const paramString = parameters\n                        .filter(parameter => parameter.value)\n                        .map(a => `&${a.param}=${a.value}`).join('')\n    setQuery(paramString)\n  }, [year, launch, landing])\n\n\n\n\n  const yearListButton = years.map((number) =>\n    <Col md={6} sm={6} xs={6} className=\"mb-3\" key={number}>\n      <Button variant=\"primary\" onClick={() => setYear(number)} >\n        {number}\n      </Button>\n    </Col>\n  );\n\n  const programListTile = programs.map(program => {\n      return(\n        <Col lg={3} md={6} sm={6} xs={12}  className=\"program-card\" key={program.flight_number}>\n          <div className=\"card mb-4\" >\n            <div className=\"card-body img pb-0\">\n              <img className=\"card-img-top\" alt={program.mission_name} src={program.links.mission_patch_small}/>\n            </div>\n            <div className=\"card-body\">\n              <div className=\"card-title\">\n                <strong>{program.mission_name} #{program.flight_number}</strong>\n              </div>\n              <div>\n                <strong>Mission Ids: </strong>\n                {program.mission_id.length > 0 &&\n                  <ul>\n                    {program.mission_id.map(id => <li key={id}>{id}</li>)}\n                  </ul>\n                }\n              </div>\n              <div><strong>Launch Year: </strong>{program.launch_year}</div>\n              <div><strong>Succesfuly Launch: </strong>{String(program.launch_success)}</div>          \n              <div><strong>Succesfuly Landing: </strong>{String(program.land_success)}</div>\n            </div>\n          </div>\n        </Col>\n      )\n    }\n  );\n  \n\n  return (\n\n    \n    <div className=\"App\">\n      <Container>\n        <Row>\n          <Col md={12}>\n            <h1>SpaceX Launch Programs</h1>\n          </Col>\n\n          <Col className=\"text-center bg-white\" md={2}>\n            Launch Year\n            <hr/>\n            <Row>\n              {yearListButton}\n            </Row>\n\n            Succesfuly Launch\n            <hr/>\n            <Row className=\"btn-list\">\n              <Col md={6} sm={6} xs={6}>\n                <Button variant=\"primary\"  onClick={() => setLaunch(true)}>true</Button>\n              </Col>\n              <Col md={6} sm={6} xs={6}>\n                <Button variant=\"primary\"  onClick={() => setLaunch(false)}>false</Button>\n              </Col>\n            </Row>\n\n            Succesfuly Landing\n            <hr/>\n            <Row className=\"btn-list\">\n              <Col md={6} sm={6} xs={6}>\n                <Button variant=\"primary\"  onClick={() => setLanding(true)}>true</Button>\n              </Col>\n              <Col md={6} sm={6} xs={6}>\n                <Button variant=\"primary\"  onClick={() => setLanding(false)}>false</Button>\n              </Col>\n            </Row>\n\n          </Col>\n          <Col className=\"col-md-10\">\n            <Row>\n              {\n                programListTile\n              }\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}